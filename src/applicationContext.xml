<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:util="http://www.springframework.org/schema/util" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jaxrs="http://cxf.apache.org/jaxrs"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/util  
     http://www.springframework.org/schema/util/spring-util-4.0.xsd 
     http://www.springframework.org/schema/context
     http://www.springframework.org/schema/context/spring-context-4.0.xsd
     http://www.springframework.org/schema/tx
     http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd">

    <import resource="classpath:META-INF/cxf/cxf.xml"/>
    <import resource="classpath:META-INF/cxf/cxf-servlet.xml"/>

    <bean id="sessionFactory"
          class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="configLocation" value="classpath:hibernate.cfg.xml">
        </property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">
                    org.hibernate.dialect.MySQLDialect
                </prop>
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.format_sql">true</prop>
                <prop key="hibernate.connection.url">jdbc:mysql://localhost:3306/express</prop>
                <prop key="hibernate.connection.driver_class">com.mysql.jdbc.Driver</prop>
                <!--prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext</prop -->
            </props>
        </property>

        <property name="packagesToScan">    <!--不知道为了什么,这里必须要有 -->
            <list>
                <value>com.express.model</value>
                <value>com.express.daoBase</value>
                <value>com.express.daoImpl</value>
            </list>
        </property>
    </bean>

    <!-- 配置事务管理器 -->
    <bean id="transactionManager"
          class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    <tx:annotation-driven transaction-manager="transactionManager"
                          proxy-target-class="true"/>

    <bean id="AddressDao" class="com.express.daoImpl.AddressDao">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>
    <bean id="CustomerDao" class="com.express.daoImpl.CustomerDao">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>
    <bean id="EmployeesDao" class="com.express.daoImpl.EmployeesDao">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>
    <bean id="ExpressDao" class="com.express.daoImpl.ExpressDao">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>
    <bean id="PackageDao" class="com.express.daoImpl.PackageDao">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>
    <bean id="PositionDao" class="com.express.daoImpl.PositionDao">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>
    <bean id="RegionDao" class="com.express.daoImpl.RegionDao">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>
    <bean id="ProvinceDao" class="com.express.daoImpl.ProvinceDao">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>
    <bean id="CityDao" class="com.express.daoImpl.CityDao">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>
    <bean id="OutletsDao" class="com.express.daoImpl.OutletsDao">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>
    <bean id="ExpressAndPackageDao" class="com.express.daoImpl.ExpressAndPackageDao">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>
    <bean id="PackAndpackDao" class="com.express.daoImpl.PackAndpackDao">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>
    <bean id="PackageHistoryDao" class="com.express.daoImpl.PackageHistoryDao">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>
    <bean id="WordDao" class="com.express.daoImpl.WordDao">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>

    <!--自己加的-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="create*" propagation="REQUIRED"/>
            <tx:method name="insert*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="merge*" propagation="REQUIRED"/>
            <tx:method name="del*" propagation="REQUIRED"/>
            <tx:method name="remove*" propagation="REQUIRED"/>
            <tx:method name="put*" propagation="REQUIRED"/>
            <tx:method name="use*" propagation="REQUIRED"/>
            <tx:method name="recordOperLog" propagation="REQUIRED"/>
            <!--hibernate4必须配置为开启事务 否则 getCurrentSession()获取不到 -->
            <tx:method name="get*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="count*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="find*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="list*" propagation="REQUIRED" read-only="true"/>
        </tx:attributes>
    </tx:advice>

    <!-- REST服务的注解例子 -->
    <jaxrs:server id="Service" address="/REST">
        <jaxrs:serviceBeans>
            <bean class="com.express.serviceImpl.MiscService">
                <property name="ProvinceDao" ref="ProvinceDao"></property>
                <property name="CustomerDao" ref="CustomerDao"></property>
                <property name="RegionDao" ref="RegionDao"></property>
                <property name="CityDao" ref="CityDao"></property>
                <property name="OutletsDao" ref="OutletsDao"></property>
                <property name="AddressDao" ref="AddressDao"></property>
            </bean>
            <bean class="com.express.serviceImpl.DomainService">
                <property name="CustomerDao" ref="CustomerDao"></property>
                <property name="ExpressDao" ref="ExpressDao"></property>
                <property name="AddressDao" ref="AddressDao"></property>
                <property name="EmployeesDao" ref="EmployeesDao"></property>
                <property name="PackageDao" ref="PackageDao"></property>
                <property name="ExpressAndPackageDao" ref="ExpressAndPackageDao"></property>
                <property name="PackAndpackDao" ref="PackAndpackDao"></property>
                <property name="RegionDao" ref="RegionDao"></property>
                <property name="CityDao" ref="CityDao"></property>
                <property name="ProvinceDao" ref="ProvinceDao"></property>
                <property name="PackageHistoryDao" ref="PackageHistoryDao"></property>
                <property name="OutletsDao" ref="OutletsDao"></property>
                <property name="WordDao" ref="WordDao"></property>
            </bean>
        </jaxrs:serviceBeans>

        <jaxrs:extensionMappings>
            <entry key="json" value="application/json"/>
            <entry key="xml" value="application/xml"/>
        </jaxrs:extensionMappings>

        <jaxrs:providers>
            <ref bean="jsonProvider"/>
            <bean class="com.express.serviceException.InvokeFaultExceptionMapper"/>
        </jaxrs:providers>

        <jaxrs:languageMappings>
            <entry key="en" value="en-gb"/>
        </jaxrs:languageMappings>
    </jaxrs:server>

    <!-- JsonProvider的属性说明:
            1. dropRootElement 默认为false，则Json格式会将类名作为第一个节点，如{Customer:{"id":123,"name":"John"}}，如果配置为true，则Json格式为{"id":123,"name":"John"}，而Gson等Json包会解析格式为后者。
            2. dropCollectionWrapperElement属性默认为false，则当遇到Collection时，Json会在集合中将容器中类名作为一个节点，比如{"Customer":{{"id":123,"name":"John"}}}，而设置为false，则JSon格式为{{"id":123,"name":"John"}}
            3. serializeAsArray属性默认为false，则当遇到Collecion时，格式为{{"id":123,"name":"John"}}，如果设置为true，则格式为[{"id":123,"name":"john"}]，而Gson等解析为后者。 -->
    <util:list id="jsonKeys">
        <value>app</value>
        <value>comment</value>
    </util:list>

    <util:list id="jsonTypes">
        <value>application/json</value>
        <value>application/jettison</value>
    </util:list>
    <bean id="jsonProvider" class="org.apache.cxf.jaxrs.provider.json.JSONProvider">
        <!-- <property name="dropRootElement" value="true" /> <property name="dropCollectionWrapperElement"
            value="true" /> <property name="serializeAsArray" value="true" /> -->
        <property name="serializeAsArray" value="true"/>
        <property name="arrayKeys" ref="jsonKeys"/>
        <property name="produceMediaTypes" ref="jsonTypes"/>
        <property name="consumeMediaTypes" ref="jsonTypes"/>
        <property name="ignoreNamespaces" value="true"/>
        <property name="dropRootElement" value="true"/>
        <property name="dropCollectionWrapperElement" value="true"/>
        <property name="ignoreMixedContent" value="true"/>
        <property name="supportUnwrapped" value="true"/>
        <property name="attributesToElements" value="true"/>
    </bean>

</beans>
